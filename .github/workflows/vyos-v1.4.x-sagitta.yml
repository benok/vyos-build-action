name: VyOS v1.4.x LTS Release

on:
  push:
    tags:
      - 'v1.4.*'
  workflow_dispatch:

env:
  GIT_CLONE_URL: https://github.com/vyos/vyos-build
  DEBIAN_MIRROR: https://mirrors.xtom.jp/debian/
  BRANCH: sagitta
  BUILD_ARCH: amd64
  BUILD_BY: vyos-build-action@github.com
  BUILD_TYPE: release
  BUILD_VERSION: 1.4.0
  BUILD_QEMU: true
  BUILD_QCOW2: true
  BUILD_HYPERV: true
  BUILD_VMWARE: true
  PACKER_JSON_PATCH: false
  PACKER_JSON_PATCH_FILE: packer.json_wait-time_equuleus.patch
  VMWARE_OVFTOOL: VMware-ovftool-4.4.1-16812187-lin.x86_64.bundle
  VMWARE_PRIVATE_KEY: private_key_for_signing_vmware_image.pem
  ARTIFACTS_DIR: artifacts
  WORKING_DIR: vyos-build
  STATUS_SUCCESS: '::set-output name=status::success'

jobs:
  build_container:
    runs-on: ubuntu-latest
    steps:
      - name: Add Buildx
        uses: docker/setup-buildx-action@v2
      - name: Add qemu
        uses: docker/setup-qemu-action@v2
      - name: CheckOut
        uses: actions/checkout@v4.1.1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          platforms: linux/amd64
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: clone
        run: git clone -b $BRANCH --single-branch $GIT_CLONE_URL vyos-build
      - name: Build and Push to GitHub Container Registry
        uses: docker/build-push-action@v3
        with:
          context: ./vyos-build/docker
          platforms: linux/amd64,linux/arm64
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/vyos-build-actions:${{ env.BRANCH }}
          labels: ${{ env.BRANCH }}
  build:
    # needs: build_container
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ragujp/vyos-build-actions:sagitta
      options: --workdir /vyos --privileged

    steps:
      - name: Clone source code
        run: |
          git clone -b $BRANCH --single-branch $GIT_CLONE_URL
        # cd $WORKING_DIR
        # mkdir -p ./$ARTIFACTS_DIR

      - name: Build ISO
        working-directory: ./vyos-build
        run: |
          sudo make clean
          sudo ./build-vyos-image iso --architecture $BUILD_ARCH --build-by $BUILD_BY --build-type $BUILD_TYPE --version $BUILD_VERSION-$(date +%Y%m%d%H%M) --debian-mirror $DEBIAN_MIRROR
      # cp -f ./$WORKING_DIR/build/vyos-${{ env.BUILD_VERSION }}-*.iso ./$ARTIFACTS_DIR/
      # - name: Build QEMU Image
      #   id: qemu
      #   working-directory: ./${{ env.WORKING_DIR }}
      #   if: steps.iso.outputs.status == 'success' && env.BUILD_QEMU == 'true'
      #   run: |
      #     [ $PACKER_JSON_PATCH = true ] && git apply $GITHUB_WORKSPACE/patchs/$PACKER_JSON_PATCH_FILE
      #     [ -e ./build/live-image-$BUILD_ARCH.hybrid.iso ] && make qemu && echo $STATUS_SUCCESS
      #     cp -f ./packer_build/qemu/vyos_qemu_image.img ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH-qemu.img
      #     cp -f ./build/vyos-$BUILD_VERSION-$BUILD_ARCH.qcow2 ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH-qemu.qcow2
      # - name: Build Hyper-V Image
      #   working-directory: ./${{ env.WORKING_DIR }}
      #   if: steps.qemu.outputs.status == 'success' && env.BUILD_HYPERV == 'true'
      #   run: |
      #     [ -e ./packer_build/qemu/vyos_qemu_image.img ] && make hyperv
      #     cp -f ./packer_build/hyperv/vyos_hyperv_image.vhd ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH-hyperv.vhd
      # - name: Build VMware Image
      #   working-directory: ./${{ env.WORKING_DIR }}
      #   if: steps.qemu.outputs.status == 'success' && env.BUILD_VMWARE == 'true'
      #   run: |
      #     export PRIVATE_KEY_PATH="$GITHUB_WORKSPACE/tools/$VMWARE_PRIVATE_KEY"
      #     $GITHUB_WORKSPACE/tools/$VMWARE_OVFTOOL --eulas-agreed
      #     [ -e ./packer_build/qemu/vyos_qemu_image.img ] && make vmware
      #     cp -f ./build/vyos_vmware_image-signed.cert ./$ARTIFACTS_DIR/
      #     cp -f ./build/vyos_vmware_image-signed-disk1.vmdk ./$ARTIFACTS_DIR/
      #     cp -f ./build/vyos_vmware_image-signed.mf ./$ARTIFACTS_DIR/
      #     cp -f ./build/vyos_vmware_image-signed.ovf ./$ARTIFACTS_DIR/
      #     cp -f ./build/vyos_vmware_image-signed.ova ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH-vmware-signed.ova
      #     cp -f ./build/vyos_vmware_image.vmdk ./$ARTIFACTS_DIR/vyos-$BUILD_VERSION-$BUILD_ARCH-vmware.vmdk
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-iso
          path: vyos-build/build/vyos-${{ env.BUILD_VERSION }}-*.iso
        # name: vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-images
        # path: ${{ env.WORKING_DIR }}/${{ env.ARTIFACTS_DIR }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-iso
          path: vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-iso
        #  name: vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-images

      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          asset=$(find ./vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-iso/ -name "vyos-${{ env.BUILD_VERSION }}-*.iso" | xargs)
          tag_name="v${{ env.BUILD_VERSION }}"
          gh release create "$tag_name" "$asset"
      # - name: Release
      #   uses: softprops/action-gh-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     name: VyOS v${{ env.BUILD_VERSION }} LTS Release
      #     body: VyOS v${{ env.BUILD_VERSION }} LTS Release
      #     draft: false
      #     prerelease: false
      #     files: |
      #       vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}.iso
      # vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-qemu.img
      # vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-qemu.qcow2
      # vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-hyperv.vhd
      # vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-vmware-signed.ova
      # vyos-${{ env.BUILD_VERSION }}-${{ env.BUILD_ARCH }}-vmware.vmdk
